// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Models;

namespace WebAPI.Migrations
{
    [DbContext(typeof(AmdDBContext))]
    [Migration("20201030163048_mig3")]
    partial class mig3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebAPI.Models.Auto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArrivalDate");

                    b.Property<int>("AuctionId");

                    b.Property<int>("BrandId");

                    b.Property<DateTime>("BuyDate");

                    b.Property<int?>("BuyerId");

                    b.Property<int?>("BuyingAccountId");

                    b.Property<int>("CarStatus");

                    b.Property<int>("CityId");

                    b.Property<string>("Color");

                    b.Property<int?>("ContainerId");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<int?>("CreationUserId");

                    b.Property<string>("Description");

                    b.Property<int>("DestinationId");

                    b.Property<int>("DisplayStatus");

                    b.Property<string>("Engine");

                    b.Property<int>("LoadPortId");

                    b.Property<string>("Lot");

                    b.Property<string>("Model");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<int?>("ModificationUserId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("PaperStatus");

                    b.Property<decimal?>("RemainingPayment");

                    b.Property<int>("Type");

                    b.Property<string>("VinNo");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("BrandId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CityId");

                    b.HasIndex("ContainerId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("LoadPortId");

                    b.HasIndex("ModificationUserId");

                    b.ToTable("Autos");
                });

            modelBuilder.Entity("WebAPI.Models.AutoImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContainerId");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<int?>("CreationUserId");

                    b.Property<byte[]>("Image")
                        .IsRequired();

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<int?>("ModificationUserId");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.ToTable("AutoImages");
                });

            modelBuilder.Entity("WebAPI.Models.Container", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate");

                    b.Property<int?>("CreationUserId");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<int?>("ModificationUserId");

                    b.Property<string>("Name");

                    b.Property<string>("SerialNumber");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("WebAPI.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ProgramId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("WebAPI.Models.Lookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Lookups");
                });

            modelBuilder.Entity("WebAPI.Models.LookupValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("LookupValues");
                });

            modelBuilder.Entity("WebAPI.Models.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate");

                    b.Property<int?>("CreationUserId");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<int?>("ModificationUserId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("WebAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate");

                    b.Property<int?>("CreationUserId");

                    b.Property<int>("GroupId");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<int?>("ModificationUserId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId")
                        .IsUnique()
                        .HasFilter("[CreationUserId] IS NOT NULL");

                    b.HasIndex("GroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebAPI.Models.Auto", b =>
                {
                    b.HasOne("WebAPI.Models.LookupValue", "Auction")
                        .WithMany()
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebAPI.Models.LookupValue", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebAPI.Models.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");

                    b.HasOne("WebAPI.Models.LookupValue", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebAPI.Models.Container", "Container")
                        .WithMany()
                        .HasForeignKey("ContainerId");

                    b.HasOne("WebAPI.Models.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("WebAPI.Models.LookupValue", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebAPI.Models.LookupValue", "LoadPort")
                        .WithMany()
                        .HasForeignKey("LoadPortId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebAPI.Models.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");
                });

            modelBuilder.Entity("WebAPI.Models.AutoImage", b =>
                {
                    b.HasOne("WebAPI.Models.Container", "Container")
                        .WithMany()
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebAPI.Models.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("WebAPI.Models.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");
                });

            modelBuilder.Entity("WebAPI.Models.Container", b =>
                {
                    b.HasOne("WebAPI.Models.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("WebAPI.Models.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");
                });

            modelBuilder.Entity("WebAPI.Models.Group", b =>
                {
                    b.HasOne("WebAPI.Models.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebAPI.Models.LookupValue", b =>
                {
                    b.HasOne("WebAPI.Models.Lookup", "Lookup")
                        .WithMany()
                        .HasForeignKey("LookupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebAPI.Models.Program", b =>
                {
                    b.HasOne("WebAPI.Models.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("WebAPI.Models.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");
                });

            modelBuilder.Entity("WebAPI.Models.User", b =>
                {
                    b.HasOne("WebAPI.Models.User", "CreationUser")
                        .WithOne("ModificationUser")
                        .HasForeignKey("WebAPI.Models.User", "CreationUserId");

                    b.HasOne("WebAPI.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
